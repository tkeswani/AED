/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.NGODoctor;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.HospitalReceptionistOrganization;
import Business.Organization.NGODoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.PharmacyOrganization;
import Business.Patient.Patient;
import Business.Pharmacy.Drug;
import Business.Pharmacy.Order;
import Business.Pharmacy.OrderItem;
import Business.Pharmacy.Supplier;
import Business.Sensors.Sensors;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tarun
 */
public class NGODoctorWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form NGODoctorWorkArea
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private EcoSystem business;
    private Patient patient;
    private Order order;
    private float totalAmount=0;
    private WorkRequest request;
    private OrderItem oi;
    
    public NGODoctorWorkArea(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.business = business;
        jTabbedPane1.setEnabledAt(1, false);
        
        populateDoctorQueueTable();
    }

    public void populateDoctorQueueTable() {
        DefaultTableModel model = (DefaultTableModel)doctorQueueTable.getModel();
        model.setRowCount(0);
        
        for(Organization organization : enterprise.getOrgDir().getOrganizationList()) {
            if(organization instanceof NGODoctorOrganization) {
                for(WorkRequest request: organization.getWorkQueue().getWorkRequestList()) {
                    if(request.getSender()!=null) {
                   Object[] row = new Object[7];
                   row[0] = request;
                   row[1] = request.getPatient();
                   row[2] = request.getSender();
                   row[3] = request.getReceiver();
                   row[4] = request.getRequestDate();
                   row[5] = request.getResolveDate();
                   row[6] = request.getStatus();
                   
                   model.addRow(row);
                    }
            }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorQueueTable = new javax.swing.JTable();
        assignBtn = new javax.swing.JButton();
        checkupBtn = new javax.swing.JButton();
        emergencyBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        patientVitalSignHistoryTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        supplierListComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicineListTable = new javax.swing.JTable();
        addToCartBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        jScrollPane4 = new javax.swing.JScrollPane();
        addToCartTable = new javax.swing.JTable();
        confirmBtn = new javax.swing.JButton();

        doctorQueueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MESSAGE", "PATIENT", "SENDER", "RECEIVER", "ASSIGNED DATE", "RESOLVED DATE", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(doctorQueueTable);

        assignBtn.setText("ASSIGN ME");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });

        checkupBtn.setText("CHECK UP");
        checkupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkupBtnActionPerformed(evt);
            }
        });

        emergencyBtn.setText("EMERGENCY");
        emergencyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emergencyBtnActionPerformed(evt);
            }
        });

        patientVitalSignHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "HEART RATE", "BLOOD PRESSURE", "RESPIRATORY DATE", "WEIGHT", "STATUS", "DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientVitalSignHistoryTable.setEnabled(false);
        jScrollPane3.setViewportView(patientVitalSignHistoryTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(402, 402, 402)
                        .addComponent(assignBtn)
                        .addGap(47, 47, 47)
                        .addComponent(checkupBtn)
                        .addGap(41, 41, 41)
                        .addComponent(emergencyBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(282, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignBtn)
                    .addComponent(checkupBtn)
                    .addComponent(emergencyBtn))
                .addGap(138, 138, 138)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(300, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("DOCTOR WORK QUEUE", jPanel1);

        jLabel1.setText("SUPPLIERS");

        supplierListComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierListComboBoxActionPerformed(evt);
            }
        });

        medicineListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEDICINE", "MEDICINE NAME", "MARKET PRICE", "QUANTITY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(medicineListTable);

        addToCartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/NGODoctor/add-to-cart-button-blue.png"))); // NOI18N
        addToCartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("QUANTITY");

        addToCartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEDICINE NAME", "MARKET PRICE", "QUANTITY", "TOTAL AMOUNT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(addToCartTable);

        confirmBtn.setText("CONFIRM ORDER");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(40, 40, 40)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(addToCartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(398, 398, 398)
                            .addComponent(jLabel1)
                            .addGap(62, 62, 62)
                            .addComponent(supplierListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(275, 275, 275)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                                .addComponent(jScrollPane4)))))
                .addContainerGap(362, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(505, 505, 505)
                .addComponent(confirmBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(supplierListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(addToCartBtn)))
                .addGap(126, 126, 126)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(confirmBtn)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("MEDICATION", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addToCartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartBtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = medicineListTable.getSelectedRow();

        if(selectedRow >= 0) {
            Drug drug = (Drug) medicineListTable.getValueAt(selectedRow, 0);
            int orderQuantity = (int) quantitySpinner.getValue();
            int availableQuantity = drug.getQuantity();
            if( orderQuantity > availableQuantity) {
                JOptionPane.showMessageDialog(this, "Ordered Quantity is greater than the Available Quantity");
            }
            else {
                oi = new OrderItem();
                    oi.setDrug(drug);
                    oi.setQuantity(orderQuantity);
                    order.getOrderItem().add(oi);
                    order.setStatus("Processing");
                    drug.setQuantity(availableQuantity - orderQuantity);
                    populateOrderMedicineTable();
//                drug.setQuantity(availableQuantity - orderQuantity);
//                order = drug.getOrderCatalog().addOrder();
//                order.setMarketPrice(drug.getMarketPrice());
//                order.setMedicineName(drug.getName());
//                order.setQuantity(orderQuantity);
//                order.setStatus("PROCESSING");
//                order.setSupplier((Supplier) supplierListComboBox.getSelectedItem());
//                //patient = (Patient) doctorQueueTable.getValueAt(selectedRow, 1);
//                business.getMasterOrder().getOrderList().add(order);
//                patient.getOrderCatalog().getOrderList().add(order);
//                populateOrderMedicineTable(patient);
//                //order.setStatus("COMPLETED");
//                request.setResolveDate(new Date());
//                request.setStatus("Medication Added To Cart");
//                populateDoctorQueueTable();
                //totalAmount = totalAmount + orderQuantity*drug.getMarketPrice();
                //totalAmountTxtField.setText(String.valueOf(totalAmount));
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Row!!!");
        }
    }//GEN-LAST:event_addToCartBtnActionPerformed

    private void supplierListComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierListComboBoxActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)medicineListTable.getModel();

        model.setRowCount(0);

        Supplier supplier = (Supplier) supplierListComboBox.getSelectedItem();
        for(Drug drug : supplier.getDrugList()) {
            Object[] row = new Object[4];
            row[0] = drug;
            row[1] = drug.getName();
            row[2] = drug.getMarketPrice();
            row[3] = drug.getQuantity();

            model.addRow(row);
        }

    }//GEN-LAST:event_supplierListComboBoxActionPerformed

    // Alerting the Hospital for Ambulance
    private void emergencyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emergencyBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = doctorQueueTable.getSelectedRow();
        HospitalReceptionistOrganization receptionOrg = null;
        WorkRequest req = new WorkRequest();
        if(selectedRow>=0) {
            request = (WorkRequest) doctorQueueTable.getValueAt(selectedRow, 0);
            String res = request.getReceiver() == null ? "EMPTY" : "OCCUPIED";
            if(res.equals("OCCUPIED")) {
                if(request.getReceiver().equals(userAccount)) {
                    if((!(request.getStatus().equalsIgnoreCase("Sent To Hospital"))) && (!request.getStatus().equalsIgnoreCase("Medication Provided"))) {
                        for(Network network : business.getNetworkList()) {
                            for(Enterprise ent : network.getEntDirectory().getEnterpriseList()) {
                                if(Enterprise.EnterpriseType.Hospital.getValue().equals(ent.getEntType().getValue())) {
                                    for(Organization org : ent.getOrgDir().getOrganizationList()) {
                                        if(org instanceof HospitalReceptionistOrganization) {
                                            receptionOrg = (HospitalReceptionistOrganization) org;
                                            request = (WorkRequest) doctorQueueTable.getValueAt(selectedRow, 0);
                                            //request.setSender(userAccount);
                                            
                                            request.setStatus("Sent To Hospital");
                                            request.setResolveDate(new Date());
                                            
                                            UserAccount acc = request.getSender();
                                            acc.getWorkQueue().getWorkRequestList().add(req);
                                            acc.getWorkQueue().getWorkRequestList().remove(request);
                                            req.setMessage("Need Attention");
                                            req.setPatient(request.getPatient());
                                            req.setSender(userAccount);
                                            req.setStatus("Sent To Hospital");
                                            req.setRequestDate(new Date());
                                            receptionOrg.getWorkQueue().getWorkRequestList().add(req);                         
                                            populateDoctorQueueTable();
                                            JOptionPane.showMessageDialog(this, "Ambulance Requested!!!");

                                        }
                                    }
                                }
                            }
                        }

                        if(receptionOrg!=null) {
//                            System.out.println("In RECEPTION ORGANIZATION");
//                            request = (WorkRequest) doctorQueueTable.getValueAt(selectedRow, 0);
//                            //request.setSender(userAccount);
//                            request.setStatus("Sent To Hospital");
//                            request.setResolveDate(new Date());
//                            WorkRequest req = new WorkRequest();
//                            UserAccount acc = request.getSender();
//                            acc.getWorkQueue().getWorkRequestList().add(req);
//                            acc.getWorkQueue().getWorkRequestList().remove(request);
//                            req.setMessage("Need Attention");
//                            req.setPatient(request.getPatient());
//                            req.setSender(userAccount);
//                            req.setStatus("Sent To Hospital");
//                            req.setRequestDate(new Date());
//                            receptionOrg.getWorkQueue().getWorkRequestList().add(req);                         
//                            populateDoctorQueueTable();
//                            JOptionPane.showMessageDialog(this, "Ambulance Requested!!!");
                        }
                    }
                    else {
                        JOptionPane.showMessageDialog(this, "Patient Already Treated!!!");
                    }
                }

                else {
                    JOptionPane.showMessageDialog(this, "Patient Under Another Doctor Supervision!!!");
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "You Have Not Assigned The Request To Yourself!!!");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_emergencyBtnActionPerformed

    private void checkupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkupBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = doctorQueueTable.getSelectedRow();

        PharmacyOrganization orgn = null;
        if(selectedRow>=0) {
            request = (WorkRequest) doctorQueueTable.getValueAt(selectedRow, 0);
            patient = (Patient) doctorQueueTable.getValueAt(selectedRow, 1);
            String res = request.getReceiver() == null ? "EMPTY" : "OCCUPIED";
            if(res.equals("OCCUPIED")) {
                if(request.getReceiver().equals(userAccount)) {
                    if(!(request.getStatus().equalsIgnoreCase("Medication Provided")) && (!request.getStatus().equalsIgnoreCase("Sent To Hospital"))) {
                        // patientLabel.setText(doctorQueueTable.getValueAt(selectedRow, 1));
                        order = new Order();
                        jTabbedPane1.setEnabledAt(1, true);
                        jTabbedPane1.setSelectedIndex(1);
                        for(Network network : business.getNetworkList()) {
                            for(Enterprise ent : network.getEntDirectory().getEnterpriseList()) {
                                if(Enterprise.EnterpriseType.Pharmacy.getValue().equals(ent.getEntType().getValue())) {
                                    for(Organization org : ent.getOrgDir().getOrganizationList()) {
                                        if(org instanceof PharmacyOrganization) {
                                            orgn = (PharmacyOrganization) org;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if(orgn!=null) {
                            if(!(orgn.getSupplierDir().getSupplierList().isEmpty())) {
                                for(Supplier supplier : orgn.getSupplierDir().getSupplierList()) {
                                    supplierListComboBox.addItem(supplier);
                                }
                            }

                        }
                    }
                    else {
                        JOptionPane.showMessageDialog(this, "Patient Already Treated!!!");
                    }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Patient Under Another Doctor Supervision");
                }

            }

            else {
                JOptionPane.showMessageDialog(this, "You Have Not Assigned The Request To Yourself!!!");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_checkupBtnActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = doctorQueueTable.getSelectedRow();
        if(selectedRow >= 0) {
            request = (WorkRequest) doctorQueueTable.getValueAt(selectedRow, 0);
            String res = request.getReceiver() == null ? "EMPTY" : "OCCUPIED";
            if(res.equals("EMPTY")) {
                request.setReceiver(userAccount);
                populateDoctorQueueTable();
                populatePatientVitalSignHistoryTable(request.getPatient());
            }
            else {
                JOptionPane.showMessageDialog(this, "Already Assigned To Doctor");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_assignBtnActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
        order.setStatus("Processing");
        request.setResolveDate(new Date());
        request.setStatus("Medication Added To Cart");
        patient.getOrderCatalog().getOrderList().add(order);
        business.getMasterOrder().getOrderList().add(order);
        JOptionPane.showMessageDialog(this, "Order Has Been Added To Cart For The Patient!!!");
    }//GEN-LAST:event_confirmBtnActionPerformed

    public void populatePatientVitalSignHistoryTable(Patient patient) {
        DefaultTableModel model = (DefaultTableModel)patientVitalSignHistoryTable.getModel();
        model.setRowCount(0);
        
        for(Sensors vs : patient.getSensorHistory().getSensorList()) {
            Object[] row = new Object[6];
            row[0] = vs.getHeartRate();
            row[1] = vs.getBp();
            row[2] = vs.getRespRate();
            row[3] = vs.getWeight();
            row[4] = vs.getStatus();
            row[5] = vs.getDate();
            
            model.addRow(row);
        }
    }
    public void populateOrderMedicineTable() {
        DefaultTableModel model = (DefaultTableModel)addToCartTable.getModel();
        
        model.setRowCount(0);
        for(OrderItem orderItem : order.getOrderItem()) {
        if(order.getStatus().equalsIgnoreCase("PROCESSING")) {
            Object[] row = new Object[4];
            row[0] = orderItem.getDrug();
            Drug drug = orderItem.getDrug();
            row[1] = drug.getMarketPrice();
            row[2] = orderItem.getQuantity();
            row[3] = drug.getMarketPrice() * orderItem.getQuantity();
            
            model.addRow(row);
        }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartBtn;
    private javax.swing.JTable addToCartTable;
    private javax.swing.JButton assignBtn;
    private javax.swing.JButton checkupBtn;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JTable doctorQueueTable;
    private javax.swing.JButton emergencyBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable medicineListTable;
    private javax.swing.JTable patientVitalSignHistoryTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox supplierListComboBox;
    // End of variables declaration//GEN-END:variables
}
