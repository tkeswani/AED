/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.HospitalReceptionist;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.HospitalDoctorOrganization;
import Business.Organization.HospitalReceptionistOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import com.twilio.sdk.TwilioRestClient;
import com.twilio.sdk.TwilioRestException;
import com.twilio.sdk.resource.factory.CallFactory;
import com.twilio.sdk.resource.instance.Call;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import userInterface.MainJFrame;

/**
 *
 * @author Tarun
 */
public class HospitalReceptionistWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form HospitalReceptionistWorkArea
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private EcoSystem business;
    
    public HospitalReceptionistWorkArea(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.business = business;
        ambulanceSentLabel.setVisible(false);
        ambulanceReachedLabel.setVisible(false);
        
        populateAmbulanceQueueTable();
    }

    public void populateAmbulanceQueueTable() {
        DefaultTableModel model = (DefaultTableModel)ambulanceQueueTable.getModel();
        
        model.setRowCount(0);
        
        for(Organization organization: enterprise.getOrgDir().getOrganizationList()) {
            if(organization instanceof HospitalReceptionistOrganization) {
                for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                    Object[] row = new Object[7];
                    row[0] = request;
                    row[1] = request.getPatient();
                    row[2] = request.getSender();
                    row[3] = request.getReceiver();
                    row[4] = request.getRequestDate();
                    row[5] = request.getResolveDate();
                    row[6] = request.getStatus();
                    
                    model.addRow(row);
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ambulanceQueueTable = new javax.swing.JTable();
        assignMeBtn = new javax.swing.JButton();
        ambulanceBtn = new javax.swing.JButton();
        ambulanceReachedBtn = new javax.swing.JButton();
        sendToDoctorBtn = new javax.swing.JButton();
        ambulanceSentLabel = new javax.swing.JLabel();
        ambulanceReachedLabel = new javax.swing.JLabel();

        ambulanceQueueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MESSAGE", "PATIENT", "SENDER", "RECEIVER", "REQUEST DATE", "RESOLVE DATE", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ambulanceQueueTable);

        assignMeBtn.setText("ASSIGN TO ME");
        assignMeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignMeBtnActionPerformed(evt);
            }
        });

        ambulanceBtn.setText("AMBULANCE SEND");
        ambulanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambulanceBtnActionPerformed(evt);
            }
        });

        ambulanceReachedBtn.setText("AMBULANCE REACHED");
        ambulanceReachedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambulanceReachedBtnActionPerformed(evt);
            }
        });

        sendToDoctorBtn.setText("SEND TO DOCTOR");
        sendToDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToDoctorBtnActionPerformed(evt);
            }
        });

        ambulanceSentLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/HospitalReceptionist/Ambulance Sent.jpg"))); // NOI18N

        ambulanceReachedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/HospitalReceptionist/Ambulance Reached.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ambulanceReachedBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(assignMeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(109, 109, 109)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sendToDoctorBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ambulanceBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ambulanceSentLabel)
                        .addGap(60, 60, 60)
                        .addComponent(ambulanceReachedLabel)))
                .addContainerGap(212, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignMeBtn)
                    .addComponent(ambulanceBtn))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ambulanceReachedBtn)
                    .addComponent(sendToDoctorBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ambulanceSentLabel)
                    .addComponent(ambulanceReachedLabel))
                .addGap(78, 78, 78))
        );

        jTabbedPane1.addTab("AMBULANCE QUEUE", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignMeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignMeBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = ambulanceQueueTable.getSelectedRow();
        if(selectedRow >= 0) {
            WorkRequest request = (WorkRequest) ambulanceQueueTable.getValueAt(selectedRow, 0);
            UserAccount username = (UserAccount)ambulanceQueueTable.getValueAt(selectedRow, 3);
            String res = request.getReceiver() == null ? "EMPTY" : "OCCUPIED";
            if(res.equals("EMPTY") && (!(request.getStatus().equalsIgnoreCase("Added To Doctor Queue")))) {
                request.setReceiver(userAccount);
                populateAmbulanceQueueTable();
            }
            else {
            JOptionPane.showMessageDialog(this, "Already Assigned");
            }
                      
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_assignMeBtnActionPerformed

    private void ambulanceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambulanceBtnActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = ambulanceQueueTable.getSelectedRow();
        if(selectedRow >= 0) {
            WorkRequest request = (WorkRequest) ambulanceQueueTable.getValueAt(selectedRow, 0);
            if(request.getReceiver() != null) {
                if(request.getReceiver().equals(userAccount)) {
                if((!request.getStatus().equalsIgnoreCase("Ambulance Sent")) && (!(request.getStatus().equalsIgnoreCase("Ambulance Reached"))) && (!(request.getStatus().equalsIgnoreCase("Added To Doctor Queue")))) {
                request.setStatus("AMBULANCE SENT");
                ambulanceSentLabel.setVisible(true);
                TwilioRestClient client = new TwilioRestClient("ACd4d9c14696f348fe21e4506a5e7b14e3", "d83be392f0c78d3a493675bf8d7942f1"); 
                List<NameValuePair> params = new ArrayList<NameValuePair>(); 
                params.add(new BasicNameValuePair("To", "+18577076050")); 
                params.add(new BasicNameValuePair("From", "+18577076052")); 
                params.add(new BasicNameValuePair("Url", "https://api.twilio.com/2010-04-01/Accounts/ACd4d9c14696f348fe21e4506a5e7b14e3/Calls"));  
                params.add(new BasicNameValuePair("Method", "GET"));  
                params.add(new BasicNameValuePair("FallbackMethod", "GET"));  
                params.add(new BasicNameValuePair("StatusCallbackMethod", "GET"));    
                params.add(new BasicNameValuePair("Record", "false")); 
 
                CallFactory callFactory = client.getAccount().getCallFactory(); 
                Call call = null; 
                try {
                    call = callFactory.create(params);
                } catch (TwilioRestException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //System.out.println(call.getSid()); 
                populateAmbulanceQueueTable();
                }
                else {
                    JOptionPane.showMessageDialog(this, "Request Already Processed!!!");
                }
            }
                else {
                    JOptionPane.showMessageDialog(this, "Patient Under Another Hospital Supervision");
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "You Have Not Assigned The Request To Yourself!!!");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_ambulanceBtnActionPerformed

    private void ambulanceReachedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambulanceReachedBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = ambulanceQueueTable.getSelectedRow();
        if(selectedRow >= 0 ) {
            WorkRequest request = (WorkRequest) ambulanceQueueTable.getValueAt(selectedRow, 0);
            if(request.getReceiver() != null) {
                if(request.getReceiver().equals(userAccount)) {
            if((!(request.getStatus().equalsIgnoreCase("Ambulance Reached"))) && (!(request.getStatus().equalsIgnoreCase("Added To Doctor Queue")))) {
                if(request.getStatus().equalsIgnoreCase("Ambulance Sent")) {
                request.setStatus("AMBULANCE REACHED");
                ambulanceSentLabel.setVisible(false);
                ambulanceReachedLabel.setVisible(true);
                populateAmbulanceQueueTable();
                }
                else {
                    JOptionPane.showMessageDialog(this, "Ambulance Not Yet Sent!!!");
                }
                
            }
            else {
                JOptionPane.showMessageDialog(this, "Request Already Processd!!!");
            }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Patient Under Another Hospital Supervision");
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "You Have Not Assigned The Request To Yourself!!!");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_ambulanceReachedBtnActionPerformed

    private void sendToDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToDoctorBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = ambulanceQueueTable.getSelectedRow();
        
        if(selectedRow >= 0) {
            WorkRequest request = (WorkRequest) ambulanceQueueTable.getValueAt(selectedRow, 0);
            if(request.getReceiver() != null) {
                if(request.getReceiver().equals(userAccount)) {
            if(request.getStatus().equals("AMBULANCE REACHED")) {
                request.setStatus("ADDED TO DOCTOR QUEUE");
                request.setSender(userAccount);
                request.setReceiver(null);
                
                populateAmbulanceQueueTable();
                for(Organization organization : enterprise.getOrgDir().getOrganizationList()) {
                    if(organization instanceof HospitalDoctorOrganization) {
                        organization.getWorkQueue().getWorkRequestList().add(request);
                        JOptionPane.showMessageDialog(this, "Patient added to doctor waiting list");
                        
                        break;
                    }
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "Patient Not Yet Reached The Hospital!!!");
            }
        }
                else {
                    JOptionPane.showMessageDialog(this, "Patient Under Another Hospital Supervision");
                }
            }
            else {
                    JOptionPane.showMessageDialog(this, "You Have Not Assigned The Request To Yourself!!!");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_sendToDoctorBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ambulanceBtn;
    private javax.swing.JTable ambulanceQueueTable;
    private javax.swing.JButton ambulanceReachedBtn;
    private javax.swing.JLabel ambulanceReachedLabel;
    private javax.swing.JLabel ambulanceSentLabel;
    private javax.swing.JButton assignMeBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton sendToDoctorBtn;
    // End of variables declaration//GEN-END:variables
}
