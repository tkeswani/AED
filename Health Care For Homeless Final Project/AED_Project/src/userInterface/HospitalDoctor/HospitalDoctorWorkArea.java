/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.HospitalDoctor;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.HospitalDoctorOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.Organization.PharmacyOrganization;
import Business.Patient.LabTest;
import Business.Patient.Patient;
import Business.Pharmacy.Drug;
import Business.Pharmacy.Order;
import Business.Pharmacy.OrderItem;
import Business.Pharmacy.Supplier;
import Business.Sensors.SensorHistory;
import Business.Sensors.Sensors;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tarun
 */
public class HospitalDoctorWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form HospitalDoctorWorkArea
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private EcoSystem business;
    private Patient patient;
    private Order order;
    private float totalAmount=0;
    private WorkRequest request;
    private ArrayList<Drug> drugOrder;
    private OrderItem oi;
    
    public HospitalDoctorWorkArea(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.business = business;
        
        populatePatientWaitingTable();
        jTabbedPane1.setEnabledAt(2, false);
        jTabbedPane1.setEnabledAt(1, false);
    }

    public void populatePatientWaitingTable() {
        DefaultTableModel model = (DefaultTableModel)patientWaitingTable.getModel();
        model.setRowCount(0);
        
        for(Organization organization : enterprise.getOrgDir().getOrganizationList()) {
            if(organization instanceof HospitalDoctorOrganization) {
                for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                    Object[] row = new Object[7];
                    row[0] = request;
                    row[1] = request.getPatient();
                    row[2] = request.getSender();
                    row[3] = request.getReceiver();
                    row[4] = request.getRequestDate();
                    row[5] = request.getResolveDate();
                    row[6] = request.getStatus();
                    
                    model.addRow(row);
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientWaitingTable = new javax.swing.JTable();
        labTestBtn = new javax.swing.JButton();
        medicationBtn = new javax.swing.JButton();
        assignMeBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        patientHistoryHospitalTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        supplierComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicineListTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addToCartBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        addToCartTable = new javax.swing.JTable();
        confirmBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        urineTestCheckBox = new javax.swing.JCheckBox();
        urineLabel = new javax.swing.JLabel();
        ultraCheckBox = new javax.swing.JCheckBox();
        ultraSoundLabel = new javax.swing.JLabel();
        xrayCheckBox = new javax.swing.JCheckBox();
        xrayLabel = new javax.swing.JLabel();
        obesityCheckBox = new javax.swing.JCheckBox();
        obesityLabel = new javax.swing.JLabel();
        cardioCheckBox = new javax.swing.JCheckBox();
        cardioLabel = new javax.swing.JLabel();
        pulmanaryCheckBox = new javax.swing.JCheckBox();
        ctScanCheckBox = new javax.swing.JCheckBox();
        scoreCheckBox = new javax.swing.JCheckBox();
        diseaseCheckBox = new javax.swing.JCheckBox();
        pulmanaryLabel = new javax.swing.JLabel();
        ctScanLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        diseaseLabel = new javax.swing.JLabel();
        SUBMIT = new javax.swing.JButton();

        patientWaitingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MESSAGE", "PATIENT", "SENDER", "RECEIVER", "REQUEST DATE", "RESOLVE DATE", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientWaitingTable);

        labTestBtn.setText("LAB TEST");
        labTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labTestBtnActionPerformed(evt);
            }
        });

        medicationBtn.setText("MEDICATION");
        medicationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicationBtnActionPerformed(evt);
            }
        });

        assignMeBtn.setText("ASSIGN TO ME");
        assignMeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignMeBtnActionPerformed(evt);
            }
        });

        patientHistoryHospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "HEART RATE", "RESPIRATORY RATE", "BLOOD PRESSURE", "WEIGHT", "STATUS", "TIMESTAMP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientHistoryHospitalTable.setEnabled(false);
        jScrollPane4.setViewportView(patientHistoryHospitalTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(assignMeBtn)
                        .addGap(96, 96, 96)
                        .addComponent(labTestBtn)
                        .addGap(90, 90, 90)
                        .addComponent(medicationBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))))
                .addContainerGap(357, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labTestBtn)
                    .addComponent(medicationBtn)
                    .addComponent(assignMeBtn))
                .addGap(96, 96, 96)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("WAITING PATIENTS", jPanel1);

        jLabel1.setText("SUPPLIER");

        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });

        medicineListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEDICINE NAME", "MARKET PRICE", "QUANTITY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(medicineListTable);

        jLabel2.setText("QUANTITY");

        addToCartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/HospitalDoctor/add-to-cart-button-blue.png"))); // NOI18N
        addToCartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartBtnActionPerformed(evt);
            }
        });

        addToCartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEDICINE NAME", "MARKET PRICE", "QUANTITY", "TOTAL AMOUNT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(addToCartTable);

        confirmBtn.setText("CONFIRM");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(507, 507, 507)
                .addComponent(jLabel2)
                .addGap(35, 35, 35)
                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addToCartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(124, 124, 124))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(452, 452, 452)
                        .addComponent(jLabel1)
                        .addGap(45, 45, 45)
                        .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(523, 523, 523)
                        .addComponent(confirmBtn)))
                .addGap(453, 461, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(addToCartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(66, 66, 66)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(confirmBtn)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("MEDICINES", jPanel2);

        urineLabel.setText("URINE TEST");

        ultraSoundLabel.setText("DOPPLER ULTRASOUND");

        xrayLabel.setText("PLAIN CHEST X-RAY");

        obesityLabel.setText("OBESITY TEST");

        cardioLabel.setText("ECHOCARDIOGRAPHY");

        pulmanaryLabel.setText("CARDIOPULMANARY TEST");

        ctScanLabel.setText("CT SCAN");

        scoreLabel.setText("AGATSCON SCORE");

        diseaseLabel.setText("CORONARY ARTERY DISEASE");

        SUBMIT.setText("SUBMIT");
        SUBMIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SUBMITActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(386, 386, 386)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(urineTestCheckBox)
                                    .addComponent(ultraCheckBox)
                                    .addComponent(xrayCheckBox)
                                    .addComponent(cardioCheckBox)
                                    .addComponent(pulmanaryCheckBox)
                                    .addComponent(ctScanCheckBox)
                                    .addComponent(scoreCheckBox)
                                    .addComponent(diseaseCheckBox))
                                .addGap(66, 66, 66)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(diseaseLabel)
                                    .addComponent(scoreLabel)
                                    .addComponent(ctScanLabel)
                                    .addComponent(pulmanaryLabel)
                                    .addComponent(cardioLabel)
                                    .addComponent(obesityLabel)
                                    .addComponent(xrayLabel)
                                    .addComponent(ultraSoundLabel)
                                    .addComponent(urineLabel)))
                            .addComponent(obesityCheckBox)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(530, 530, 530)
                        .addComponent(SUBMIT)))
                .addContainerGap(584, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(urineTestCheckBox)
                    .addComponent(urineLabel))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ultraCheckBox)
                    .addComponent(ultraSoundLabel))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xrayCheckBox)
                    .addComponent(xrayLabel))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(obesityCheckBox)
                    .addComponent(obesityLabel))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardioCheckBox)
                    .addComponent(cardioLabel))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pulmanaryCheckBox)
                    .addComponent(pulmanaryLabel))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ctScanCheckBox)
                    .addComponent(ctScanLabel))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scoreCheckBox)
                    .addComponent(scoreLabel))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(diseaseCheckBox)
                    .addComponent(diseaseLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(SUBMIT)
                .addGap(32, 32, 32))
        );

        jTabbedPane1.addTab("RECOMMENDED TESTS", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignMeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignMeBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientWaitingTable.getSelectedRow();
        
        if(selectedRow >= 0) {
            request = (WorkRequest) patientWaitingTable.getValueAt(selectedRow, 0);
            String res = request.getReceiver() == null ? "EMPTY" : "OCCUPIED";
            if(res.equals("EMPTY") && ((request.getStatus().equalsIgnoreCase("Added To Doctor Queue")))) {
                request.setReceiver(userAccount);
                userAccount.getWorkQueue().getWorkRequestList().add(request);
                populatePatientWaitingTable();
                populatePatientHistoryHosDocTable();
            }
            else {
                JOptionPane.showMessageDialog(this, "Already Assigned To Doctor");
            }
            
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_assignMeBtnActionPerformed

    public void populatePatientHistoryHosDocTable() {
        DefaultTableModel model = (DefaultTableModel)patientHistoryHospitalTable.getModel();
        Patient patient = request.getPatient();
        
        for(Sensors s : patient.getSensorHistory().getSensorList()) {
            Object[] row = new Object[6];
            row[0] = s.getHeartRate();
            row[1] = s.getRespRate();
            row[2] = s.getBp();
            row[3] = s.getWeight();
            row[4] = s.getStatus();
            row[5] = s.getDate();
            
            model.addRow(row);
        }
        
        
    }
    private void labTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labTestBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientWaitingTable.getSelectedRow();
        
        if(selectedRow >= 0) {
            patient = (Patient) patientWaitingTable.getValueAt(selectedRow, 1);
            request = (WorkRequest) patientWaitingTable.getValueAt(selectedRow, 0);
            String res = request.getReceiver() == null ? "EMPTY" : "OCCUPIED";
            if(res.equals("OCCUPIED")) {
                if(request.getReceiver().equals(userAccount)) {
                    if((!(request.getStatus().equalsIgnoreCase("Sent To Lab"))) && (!(request.getStatus().equalsIgnoreCase("FAIL"))) && (!(request.getStatus().equalsIgnoreCase("PASS"))) && (!(request.getStatus().equalsIgnoreCase("Medication Added To Cart")))) {
                        int age = patient.getAge();
                        int size = patient.getSensorHistory().getSensorList().size();
                        Sensors vs = patient.getSensorHistory().getSensorList().get(size - 1);
                        if(age>=1 && age <=3) {
                            if(!(vs.getRespRate()>=20 && vs.getRespRate()<=30)) {
                                pulmanaryCheckBox.setSelected(true);
                                ctScanCheckBox.setSelected(true);
                                ultraCheckBox.setSelected(true);
                            }
                            if(!(vs.getHeartRate()>=80 && vs.getHeartRate()<=130)) {
                                cardioCheckBox.setSelected(true);
                                urineTestCheckBox.setSelected(true);
                                xrayCheckBox.setSelected(true);
                            }
                            if(!(vs.getBp()>=80 && vs.getBp()<=110)) {
                                scoreCheckBox.setSelected(true);
                                diseaseCheckBox.setSelected(true);
                            }
                            if(!(vs.getWeight()>=22 && vs.getWeight()<=31)) {
                                obesityCheckBox.setSelected(true);
                            }
                            
                        }
                        
                        else if (age>=4 && age<=5) {
                            if(!(vs.getRespRate()>=20 && vs.getRespRate()<=30)) {
                                pulmanaryCheckBox.setSelected(true);
                                ctScanCheckBox.setSelected(true);
                                ultraCheckBox.setSelected(true);
                            }
                            if(!(vs.getHeartRate()>=80 && vs.getHeartRate()<=120)) {
                                cardioCheckBox.setSelected(true);
                                urineTestCheckBox.setSelected(true);
                                xrayCheckBox.setSelected(true);
                            }
                            if(!(vs.getBp()>=80 && vs.getBp()<=110)) {
                                scoreCheckBox.setSelected(true);
                                diseaseCheckBox.setSelected(true);
                            }
                            if(!(vs.getWeight()>=31 && vs.getWeight()<=40)) {
                                obesityCheckBox.setSelected(true);
                            }
                        }
                        else if(age>=6 && age<=12) {
                            if(!(vs.getRespRate()>=20 && vs.getRespRate()<=30)) {
                                pulmanaryCheckBox.setSelected(true);
                                ctScanCheckBox.setSelected(true);
                                ultraCheckBox.setSelected(true);
                            }
                            if(!(vs.getHeartRate()>=70 && vs.getHeartRate()<=110)) {
                                cardioCheckBox.setSelected(true);
                                urineTestCheckBox.setSelected(true);
                                xrayCheckBox.setSelected(true);
                            }
                            if(!(vs.getBp()>=80 && vs.getBp()<=120)) {
                                scoreCheckBox.setSelected(true);
                                diseaseCheckBox.setSelected(true);
                            }
                            if(!(vs.getWeight()>=41 && vs.getWeight()<=92)) {
                                obesityCheckBox.setSelected(true);
                            }
                        }
                        else {
                            if(!(vs.getRespRate()>=12 && vs.getRespRate()<=20)) {
                                pulmanaryCheckBox.setSelected(true);
                                ctScanCheckBox.setSelected(true);
                                ultraCheckBox.setSelected(true);
                            }
                            if(!(vs.getHeartRate()>=55 && vs.getHeartRate()<=105)) {
                                cardioCheckBox.setSelected(true);
                                urineTestCheckBox.setSelected(true);
                                xrayCheckBox.setSelected(true);
                            }
                            if(!(vs.getBp()>=110 && vs.getBp()<=120)) {
                                scoreCheckBox.setSelected(true);
                                diseaseCheckBox.setSelected(true);
                            }
                            if(!(vs.getWeight()>=110)) {
                                obesityCheckBox.setSelected(true);
                            }
                        }
                        
                        jTabbedPane1.setEnabledAt(2, true);
                        jTabbedPane1.setSelectedIndex(2);
                    
        }
                    else {
                        JOptionPane.showMessageDialog(this, "Patient Already Treated!!!");
                    }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Patient Under Another Doctor Supervision");
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "You Have Not Assigned The Request To Yourself!!!");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
    }//GEN-LAST:event_labTestBtnActionPerformed

    private void medicationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicationBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = patientWaitingTable.getSelectedRow();
        PharmacyOrganization orgn = null;
        if(selectedRow>=0) {
           // patientLabel.setText(doctorQueueTable.getValueAt(selectedRow, 1));
            patient = (Patient) patientWaitingTable.getValueAt(selectedRow, 1);
            request = (WorkRequest) patientWaitingTable.getValueAt(selectedRow, 0);
            String res = request.getReceiver() == null ? "EMPTY" : "OCCUPIED";
            if(res.equals("OCCUPIED")) {
                if(request.getReceiver().equals(userAccount)) {
                    if((!(request.getStatus().equalsIgnoreCase("Sent To Lab"))) && (!(request.getStatus().equalsIgnoreCase("Medication Added To Cart")))) {
                            order = new Order();
                            jTabbedPane1.setEnabledAt(1, true);
                            jTabbedPane1.setSelectedIndex(1);
            for(Network network : business.getNetworkList()) {
                for(Enterprise ent : network.getEntDirectory().getEnterpriseList()) {
                    if(Enterprise.EnterpriseType.Pharmacy.getValue().equals(ent.getEntType().getValue())) {
                        for(Organization org : ent.getOrgDir().getOrganizationList()) {
                            if(org instanceof PharmacyOrganization) {
                                orgn = (PharmacyOrganization) org;
                                if(!(orgn.getSupplierDir().getSupplierList().isEmpty())) {
                                    for(Supplier supplier : orgn.getSupplierDir().getSupplierList()) {
                                        supplierComboBox.addItem(supplier);
                                    }
                                }
                            }
                        }
                    }
                }
            }
//            if(orgn!=null) {
//            if(!(orgn.getSupplierDir().getSupplierList().isEmpty())) {
//            for(Supplier supplier : orgn.getSupplierDir().getSupplierList()) {
//                supplierComboBox.addItem(supplier);
//            }
//            }
//            }
        }
                    else {
                        JOptionPane.showMessageDialog(this, "Patient Already Treated!!!");
                    }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Patient Under Another Doctor Supervision");
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "You Have Not Assigned The Request To Yourself!!!");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select A Request!!!");
        }
        
    }//GEN-LAST:event_medicationBtnActionPerformed

    private void addToCartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = medicineListTable.getSelectedRow();
        
        if(selectedRow >= 0) {
            Drug drug = (Drug) medicineListTable.getValueAt(selectedRow, 0);
            int orderQuantity = (int) quantitySpinner.getValue();
            int availableQuantity = drug.getQuantity();
            if( orderQuantity > availableQuantity) {
                JOptionPane.showMessageDialog(this, "Ordered Quantity Is Greater Than The Available Quantity!!!");
            }
            else if(orderQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Ordered Quantity Should Be Greater Than Zero!!!");
            }
            else {
                    boolean alreadyPresent = false;
                    if(!((order.getOrderItem().isEmpty()))) {
                        for(OrderItem od : order.getOrderItem()) {
                            if(od.getDrug().equals(drug)) {
                                int oldAvail = drug.getQuantity();
                                int newAvail = oldAvail - orderQuantity;
                                drug.setQuantity(newAvail);
                                od.setQuantity(orderQuantity + od.getQuantity());
                             
                                alreadyPresent = true;
                                populateOrderMedicineTable();
                                break;
                            }
                        }
                        if(!alreadyPresent) {
                            int oldAvail = drug.getQuantity();
                            int newAvail = oldAvail - orderQuantity;
                            drug.setQuantity(newAvail);
                            oi = new OrderItem();
                            oi.setDrug(drug);
                            oi.setQuantity(orderQuantity);
                            order.getOrderItem().add(oi);
                            order.setStatus("Processing");
                            populateOrderMedicineTable();
                        }
                       }
                    else {
                    oi = new OrderItem();
                    oi.setDrug(drug);
                    oi.setQuantity(orderQuantity);
                    order.getOrderItem().add(oi);
                    order.setStatus("Processing");
                    drug.setQuantity(availableQuantity - orderQuantity);
                    populateOrderMedicineTable();
                    }
//                drugOrder = order.getDrugList();
//                drug.setQuantity(orderQuantity);
//                drugOrder.add(drug);
//                
//                order.getDrugList().add(drug);
//                drug.setQuantity(availableQuantity - orderQuantity);
//                order = drug.getOrderCatalog().addOrder();
//                order.setMarketPrice(drug.getMarketPrice());
//                order.setMedicineName(drug.getName());
//                order.setQuantity(orderQuantity);
//                order.setStatus("PROCESSING");
//                order.setSupplier((Supplier) supplierComboBox.getSelectedItem());
//                //patient = (Patient) doctorQueueTable.getValueAt(selectedRow, 1);
//                
//                business.getMasterOrder().getOrderList().add(order);
//                patient.getOrderCatalog().getOrderList().add(order);
//                populateOrderMedicineTable(patient);
//                request.setResolveDate(new Date());
//                request.setStatus("Medication Added To Cart");
                //totalAmount = totalAmount + orderQuantity*drug.getMarketPrice();
                //totalAmountTxtField.setText(String.valueOf(totalAmount));
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Select The Medicine!!!");
        }
    }//GEN-LAST:event_addToCartBtnActionPerformed

    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)medicineListTable.getModel();
        
        model.setRowCount(0);
        
        Supplier supplier = (Supplier) supplierComboBox.getSelectedItem();
        for(Drug drug : supplier.getDrugList()) {
            Object[] row = new Object[4];
            row[0] = drug;
            row[1] = drug.getName();
            row[2] = drug.getMarketPrice();
            row[3] = drug.getQuantity();
            
            model.addRow(row);
        }
    }//GEN-LAST:event_supplierComboBoxActionPerformed

    private void SUBMITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SUBMITActionPerformed
        // TODO add your handling code here:
        
         LabTest labTest = new LabTest();
         
        //patient.addLabTest(labTest);    
        if(urineTestCheckBox.isSelected()) {
            //patient.getLabTest().add("Urine Test");
            labTest.setUrineTest("Urine Test");
        }
        if(ultraCheckBox.isSelected()) {
            //patient.getLabTest().add("Ultrasound");
            labTest.setUltraSound("Ultrasound");
        }
        if(xrayCheckBox.isSelected()) {
            //patient.getLabTest().add("X-Ray");
            labTest.setxRay("X-Ray");
        }
        if(obesityCheckBox.isSelected()) {
            //patient.getLabTest().add("Obesity Test");
            labTest.setObesity("Obesity Test");
        }
        if(cardioCheckBox.isSelected()) {
            //patient.getLabTest().add("EchoCardioGraphy");
            labTest.setCardioGraphy("EchoCardioGraphy");
        }
        if(pulmanaryCheckBox.isSelected()) {
            //patient.getLabTest().add("CardioPulmanary");
            labTest.setPulmonary("CardioPulmanary");
        }
        if(ctScanCheckBox.isSelected()) {
           // patient.getLabTest().add("CT Scan");
            labTest.setCtScan("CT Scan");
        }
        if(scoreCheckBox.isSelected()) {
            //patient.getLabTest().add("Agatscon Score");
            labTest.setAgatsconScore("Agatscon Score");
        }
        if(diseaseCheckBox.isSelected()) {
            //patient.getLabTest().add("Coronary Artery Disease");
            labTest.setArteryDisease("Coronary Artery Disease");
        }
        //if(!(patient.getLabTestList().isEmpty())) {
        if(!(labTest == null)) {
                    request.setLabTest(labTest);
                    request.setSender(userAccount);
                    request.setStatus("SENT TO LAB");
                    request.setReceiver(null);
                    patient.getLabTestList().add(labTest);
                    populatePatientWaitingTable();
                                        
            for(Organization organization : enterprise.getOrgDir().getOrganizationList()) {
                if(organization instanceof LabOrganization) {
                    organization.getWorkQueue().getWorkRequestList().add(request);
                    break;
                }
            }
            labTest.setStatus("Processing");
            JOptionPane.showMessageDialog(this, "Submitted For Test!!!");
        }
       // }
        
    }//GEN-LAST:event_SUBMITActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
        //order.getOrderItem().add(oi);
        order.setStatus("Processing");
        request.setResolveDate(new Date());
        request.setStatus("Medication Added To Cart");
        patient.getOrderCatalog().getOrderList().add(order);
        business.getMasterOrder().getOrderList().add(order);
        JOptionPane.showMessageDialog(this, "Order Added To Cart!!!");
    }//GEN-LAST:event_confirmBtnActionPerformed

    public void populateOrderMedicineTable() {
        DefaultTableModel model = (DefaultTableModel)addToCartTable.getModel();
        
        model.setRowCount(0);
        for(OrderItem orderItem : order.getOrderItem()) {
            if(order.getStatus().equalsIgnoreCase("PROCESSING")) {
            Object[] row = new Object[4];
            row[0] = orderItem.getDrug();
            Drug drug = orderItem.getDrug();
            row[1] = drug.getMarketPrice();
            row[2] = orderItem.getQuantity();
            row[3] = drug.getMarketPrice() * orderItem.getQuantity();
            
            model.addRow(row);
    }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SUBMIT;
    private javax.swing.JButton addToCartBtn;
    private javax.swing.JTable addToCartTable;
    private javax.swing.JButton assignMeBtn;
    private javax.swing.JCheckBox cardioCheckBox;
    private javax.swing.JLabel cardioLabel;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JCheckBox ctScanCheckBox;
    private javax.swing.JLabel ctScanLabel;
    private javax.swing.JCheckBox diseaseCheckBox;
    private javax.swing.JLabel diseaseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton labTestBtn;
    private javax.swing.JButton medicationBtn;
    private javax.swing.JTable medicineListTable;
    private javax.swing.JCheckBox obesityCheckBox;
    private javax.swing.JLabel obesityLabel;
    private javax.swing.JTable patientHistoryHospitalTable;
    private javax.swing.JTable patientWaitingTable;
    private javax.swing.JCheckBox pulmanaryCheckBox;
    private javax.swing.JLabel pulmanaryLabel;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JCheckBox scoreCheckBox;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JCheckBox ultraCheckBox;
    private javax.swing.JLabel ultraSoundLabel;
    private javax.swing.JLabel urineLabel;
    private javax.swing.JCheckBox urineTestCheckBox;
    private javax.swing.JCheckBox xrayCheckBox;
    private javax.swing.JLabel xrayLabel;
    // End of variables declaration//GEN-END:variables
}
